
version: '2'

networks:
   default:
      external:
          name: NETWORK_NAME

services:

#    zookeeper0.ORG_NAME.DOMAIN_NAME.com:
#        extends:
#            file: docker-compose-base.yaml
#            service: zookeeper
#        container_name: zookeeper0.ORG_NAME.DOMAIN_NAME.com
#        environment:
#            - ZOO_MY_ID=1
#            - ZOO_SERVERS=server.1=zookeeper0.ORG_NAME.DOMAIN_NAME.com:2888:3888 server.2=zookeeper1.ORG_NAME.DOMAIN_NAME.com:2888:3888 server.3=zookeeper2.ORG_NAME.DOMAIN_NAME.com:2888:3888

#    zookeeper1.ORG_NAME.DOMAIN_NAME.com:
#        extends:
#            file: docker-compose-base.yaml
#            service: zookeeper
#        container_name: zookeeper1.ORG_NAME.DOMAIN_NAME.com
#        environment:
#            - ZOO_MY_ID=2
#            - ZOO_SERVERS=server.1=zookeeper0.ORG_NAME.DOMAIN_NAME.com:2888:3888 server.2=zookeeper1.ORG_NAME.DOMAIN_NAME.com:2888:3888 server.3=zookeeper2.ORG_NAME.DOMAIN_NAME.com:2888:3888

#    zookeeper2.ORG_NAME.DOMAIN_NAME.com:
#        extends:
#            file: docker-compose-base.yaml
#            service: zookeeper
#        container_name: zookeeper2.ORG_NAME.DOMAIN_NAME.com
#        environment:
#            - ZOO_MY_ID=3
#            - ZOO_SERVERS=server.1=zookeeper0.ORG_NAME.DOMAIN_NAME.com:2888:3888 server.2=zookeeper1.ORG_NAME.DOMAIN_NAME.com:2888:3888 server.3=zookeeper2.ORG_NAME.DOMAIN_NAME.com:2888:3888

#    kafka0.ORG_NAME.DOMAIN_NAME.com:
#        extends:
#            file: docker-compose-base.yaml
#            service: kafka
#        container_name: kafka0.ORG_NAME.DOMAIN_NAME.com
#        environment:
#            - KAFKA_BROKER_ID=0
#            - KAFKA_ZOOKEEPER_CONNECT=zookeeper0.ORG_NAME.DOMAIN_NAME.com:2181,zookeeper1.ORG_NAME.DOMAIN_NAME.com:2181,zookeeper2.ORG_NAME.DOMAIN_NAME.com:2181
#            - KAFKA_MESSAGE_MAX_BYTES=${KAFKA_MESSAGE_MAX_BYTES}
#            - KAFKA_REPLICA_FETCH_MAX_BYTES=${KAFKA_REPLICA_FETCH_MAX_BYTES}
#            - KAFKA_REPLICA_FETCH_RESPONSE_MAX_BYTES=${KAFKA_REPLICA_FETCH_RESPONSE_MAX_BYTES}
#        depends_on:
#            - zookeeper0.ORG_NAME.DOMAIN_NAME.com
#            - zookeeper1.ORG_NAME.DOMAIN_NAME.com
#            - zookeeper2.ORG_NAME.DOMAIN_NAME.com

#    kafka1.ORG_NAME.DOMAIN_NAME.com:
#        extends:
#            file: docker-compose-base.yaml
#            service: kafka
#        container_name: kafka1.ORG_NAME.DOMAIN_NAME.com
#        environment:
#            - KAFKA_BROKER_ID=1
#            - KAFKA_ZOOKEEPER_CONNECT=zookeeper0.ORG_NAME.DOMAIN_NAME.com:2181,zookeeper1.ORG_NAME.DOMAIN_NAME.com:2181,zookeeper2.ORG_NAME.DOMAIN_NAME.com:2181
#            - KAFKA_MESSAGE_MAX_BYTES=${KAFKA_MESSAGE_MAX_BYTES}
#            - KAFKA_REPLICA_FETCH_MAX_BYTES=${KAFKA_REPLICA_FETCH_MAX_BYTES}
#            - KAFKA_REPLICA_FETCH_RESPONSE_MAX_BYTES=${KAFKA_REPLICA_FETCH_RESPONSE_MAX_BYTES}
#        depends_on:
#            - zookeeper0.ORG_NAME.DOMAIN_NAME.com
#            - zookeeper1.ORG_NAME.DOMAIN_NAME.com
#            - zookeeper2.ORG_NAME.DOMAIN_NAME.com

#    kafka2.ORG_NAME.DOMAIN_NAME.com:
#        extends:
#            file: docker-compose-base.yaml
#            service: kafka
#        container_name: kafka2.ORG_NAME.DOMAIN_NAME.com
#        environment:
#            - KAFKA_BROKER_ID=2
#            - KAFKA_ZOOKEEPER_CONNECT=zookeeper0.ORG_NAME.DOMAIN_NAME.com:2181,zookeeper1.ORG_NAME.DOMAIN_NAME.com:2181,zookeeper2.ORG_NAME.DOMAIN_NAME.com:2181
#            - KAFKA_MESSAGE_MAX_BYTES=${KAFKA_MESSAGE_MAX_BYTES}
#            - KAFKA_REPLICA_FETCH_MAX_BYTES=${KAFKA_REPLICA_FETCH_MAX_BYTES}
#            - KAFKA_REPLICA_FETCH_RESPONSE_MAX_BYTES=${KAFKA_REPLICA_FETCH_RESPONSE_MAX_BYTES}
#        depends_on:
#            - zookeeper0.ORG_NAME.DOMAIN_NAME.com
#            - zookeeper1.ORG_NAME.DOMAIN_NAME.com
#            - zookeeper2.ORG_NAME.DOMAIN_NAME.com
#
#    kafka3.ORG_NAME.DOMAIN_NAME.com:
#        extends:
#            file: docker-compose-base.yaml
#            service: kafka
#        container_name: kafka3.ORG_NAME.DOMAIN_NAME.com
#        environment:
#            - KAFKA_BROKER_ID=3
#            - KAFKA_ZOOKEEPER_CONNECT=zookeeper0.ORG_NAME.DOMAIN_NAME.com:2181,zookeeper1.ORG_NAME.DOMAIN_NAME.com:2181,zookeeper2.ORG_NAME.DOMAIN_NAME.com:2181
#            - KAFKA_MESSAGE_MAX_BYTES=${KAFKA_MESSAGE_MAX_BYTES}
#            - KAFKA_REPLICA_FETCH_MAX_BYTES=${KAFKA_REPLICA_FETCH_MAX_BYTES}
#            - KAFKA_REPLICA_FETCH_RESPONSE_MAX_BYTES=${KAFKA_REPLICA_FETCH_RESPONSE_MAX_BYTES}
#        depends_on:
#            - zookeeper0.ORG_NAME.DOMAIN_NAME.com
#            - zookeeper1.ORG_NAME.DOMAIN_NAME.com
#            - zookeeper2.ORG_NAME.DOMAIN_NAME.com

    orderer0.ORG_NAME.DOMAIN_NAME.com:
        extends:
            file: docker-compose-base.yaml
            service: orderer
        container_name: orderer0.ORG_NAME.DOMAIN_NAME.com
        environment:
            - ORDERER_HOST=orderer0.ORG_NAME.DOMAIN_NAME.com
          #  - CONFIGTX_ORDERER_ORDERERTYPE=kafka
          #  - CONFIGTX_ORDERER_KAFKA_BROKERS=[kafka0.ORG_NAME.DOMAIN_NAME.com.ORG_NAME:9092,kafka1.ORG_NAME.DOMAIN_NAME.com:9092,kafka2.ORG_NAME.DOMAIN_NAME.com:9092,kafka3.ORG_NAME.DOMAIN_NAME.com:9092]
          #  - ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s
          #  - ORDERER_KAFKA_RETRY_SHORTTOTAL=30s
          #  - ORDERER_KAFKA_VERBOSE=true
          #  - ORDERER_GENERAL_GENESISPROFILE=SampleInsecureKafka
            - ORDERER_ABSOLUTEMAXBYTES=${ORDERER_ABSOLUTEMAXBYTES}
            - ORDERER_PREFERREDMAXBYTES=${ORDERER_PREFERREDMAXBYTES}
        volumes:
            - ../crypto-config/ordererOrganizations/DOMAIN_NAME.com/orderers/orderer0.ORG_NAME.DOMAIN_NAME.com/msp:/var/hyperledger/msp
            - ../crypto-config/ordererOrganizations/DOMAIN_NAME.com/orderers/orderer0.ORG_NAME.DOMAIN_NAME.com/tls:/var/hyperledger/tls
            - ../channels/:/var/hyperledger/channels
            - /var/hyperledger/orderer0:/var/hyperledger/production/orderer
        #depends_on:
        #    - kafka0.ORG_NAME.DOMAIN_NAME.com
        #    - kafka1.ORG_NAME.DOMAIN_NAME.com
        #    - kafka2.ORG_NAME.DOMAIN_NAME.com
        #    - kafka3.ORG_NAME.DOMAIN_NAME.com
        ports:
          - 7050:7050

    orderer1.ORG_NAME.DOMAIN_NAME.com:
        extends:
            file: docker-compose-base.yaml
            service: orderer
        container_name: orderer1.ORG_NAME.DOMAIN_NAME.com
        environment:
            - ORDERER_HOST=orderer1.ORG_NAME.DOMAIN_NAME.com
          #  - CONFIGTX_ORDERER_ORDERERTYPE=kafka
          #  - CONFIGTX_ORDERER_KAFKA_BROKERS=[kafka0.ORG_NAME.DOMAIN_NAME.com:9092,kafka1.ORG_NAME.DOMAIN_NAME.com:9092,kafka2.ORG_NAME.DOMAIN_NAME.com:9092,kafka3.ORG_NAME.DOMAIN_NAME.com:9092]
          #  - ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s
          #  - ORDERER_KAFKA_RETRY_SHORTTOTAL=30s
          #  - ORDERER_KAFKA_RETRY_LONGINTERVAL=30s
          #  - ORDERER_KAFKA_RETRY_LONGTOTAL=5m
          #  - ORDERER_KAFKA_VERBOSE=true
          #  - ORDERER_GENERAL_GENESISPROFILE=SampleInsecureKafka
            - ORDERER_ABSOLUTEMAXBYTES=${ORDERER_ABSOLUTEMAXBYTES}
            - ORDERER_PREFERREDMAXBYTES=${ORDERER_PREFERREDMAXBYTES}
        volumes:
            - ../crypto-config/ordererOrganizations/DOMAIN_NAME.com/orderers/orderer1.ORG_NAME.DOMAIN_NAME.com/msp:/var/hyperledger/msp
            - ../crypto-config/ordererOrganizations/DOMAIN_NAME.com/orderers/orderer1.ORG_NAME.DOMAIN_NAME.com/tls:/var/hyperledger/tls
            - ../channels/:/var/hyperledger/channels
            - /var/hyperledger/orderer1:/var/hyperledger/production/orderer
       # depends_on:
       #     - kafka0.ORG_NAME.DOMAIN_NAME.com
       #     - kafka1.ORG_NAME.DOMAIN_NAME.com
       #     - kafka2.ORG_NAME.DOMAIN_NAME.com
       #     - kafka3.ORG_NAME.DOMAIN_NAME.com
        ports:
          - 8050:7050

    orderer2.ORG_NAME.DOMAIN_NAME.com:
        extends:
            file: docker-compose-base.yaml
            service: orderer
        container_name: orderer2.ORG_NAME.DOMAIN_NAME.com
        environment:
            - ORDERER_HOST=orderer2.ORG_NAME.DOMAIN_NAME.com
           # - CONFIGTX_ORDERER_ORDERERTYPE=kafka
           # - CONFIGTX_ORDERER_KAFKA_BROKERS=[kafka0.ORG_NAME.DOMAIN_NAME.com:9092,kafka1.ORG_NAME.DOMAIN_NAME.com:9092,kafka2.ORG_NAME.DOMAIN_NAME.com:9092,kafka3.ORG_NAME.DOMAIN_NAME.com:9092]
           # - ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s
           # - ORDERER_KAFKA_RETRY_SHORTTOTAL=30s
           # - ORDERER_KAFKA_VERBOSE=true
           # - ORDERER_GENERAL_GENESISPROFILE=SampleInsecureKafka
            - ORDERER_ABSOLUTEMAXBYTES=${ORDERER_ABSOLUTEMAXBYTES}
            - ORDERER_PREFERREDMAXBYTES=${ORDERER_PREFERREDMAXBYTES}
        volumes:
            - ../crypto-config/ordererOrganizations/DOMAIN_NAME.com/orderers/orderer2.ORG_NAME.DOMAIN_NAME.com/msp:/var/hyperledger/msp
            - ../crypto-config/ordererOrganizations/DOMAIN_NAME.com/orderers/orderer2.ORG_NAME.DOMAIN_NAME.com/tls:/var/hyperledger/tls
            - ../channels/:/var/hyperledger/channels
            - /var/hyperledger/orderer2:/var/hyperledger/production/orderer
       # depends_on:
       #     - kafka0.ORG_NAME.DOMAIN_NAME.com
       #     - kafka1.ORG_NAME.DOMAIN_NAME.com
       #     - kafka2.ORG_NAME.DOMAIN_NAME.com
       #     - kafka3.ORG_NAME.DOMAIN_NAME.com
        ports:
          - 9050:7050

    couchdb01ORG_NAME:
        extends:
            file: docker-compose-base.yaml
            service: couchdb
        container_name: couchdb01ORG_NAME
        # Comment/Uncomment the port mapping if you want to hide/expose the CouchDB service,
        # for example map it to utilize Fauxton User Interface in dev environments.
        ports:
          - "5984:5984"

    peer0.ORG_NAME.DOMAIN_NAME.com:
        extends:
            file: docker-compose-base.yaml
            service: peer
        container_name: peer0.ORG_NAME.DOMAIN_NAME.com
        environment:
#            - CORE_PEER_CHAINCODELISTENADDRESS=peer0.ORG_NAME.DOMAIN_NAME.com:7051
            - CORE_PEER_NETWORKID=peer0.ORG_NAME.DOMAIN_NAME.com
            - CORE_PEER_ID=peer0.ORG_NAME.DOMAIN_NAME.com
            - CORE_PEER_ADDRESS=peer0.ORG_NAME.DOMAIN_NAME.com:7051
            - CORE_PEER_GOSSIP_BOOTSTRAP=peer1.ORG_NAME.DOMAIN_NAME.com:7051
            - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.ORG_NAME.DOMAIN_NAME.com:7051
            - CORE_PEER_GOSSIP_ORGLEADER=false
            - CORE_PEER_GOSSIP_USELEADERELECTION=true
            - CORE_PEER_LOCALMSPID=ORG_NAMEMSP
            - CORE_PEER_TLS_CLIENTROOTCAS_FILES=/var/hyperledger/users/Admin@ORG_NAME.DOMAIN_NAME.com/tls/ca.crt
            - CORE_PEER_TLS_CLIENTCERT_FILE=/var/hyperledger/users/Admin@ORG_NAME.DOMAIN_NAME.com/tls/client.crt
            - CORE_PEER_TLS_CLIENTKEY_FILE=/var/hyperledger/users/Admin@ORG_NAME.DOMAIN_NAME.com/tls/client.key
            - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
            - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb01ORG_NAME:5984
        volumes:
            - ../crypto-config/peerOrganizations/ORG_NAME.DOMAIN_NAME.com/peers/peer0.ORG_NAME.DOMAIN_NAME.com/msp:/var/hyperledger/msp
            - ../crypto-config/peerOrganizations/ORG_NAME.DOMAIN_NAME.com/peers/peer0.ORG_NAME.DOMAIN_NAME.com/tls:/var/hyperledger/tls
            - ../crypto-config/peerOrganizations/ORG_NAME.DOMAIN_NAME.com/users:/var/hyperledger/users
            - ../channels/:/var/hyperledger/channels
            - /var/hyperledger/peer0:/var/hyperledger/production
            - ../../chaincode:/var/hyperledger/chaincode

        depends_on:
            - orderer0.ORG_NAME.DOMAIN_NAME.com
            - orderer1.ORG_NAME.DOMAIN_NAME.com
            - orderer2.ORG_NAME.DOMAIN_NAME.com
            - couchdb01ORG_NAME
        ports:
          - 7051:7051
          - 7053:7053

    couchdb02ORG_NAME:
        extends:
            file: docker-compose-base.yaml
            service: couchdb
        container_name: couchdb02ORG_NAME
        # Comment/Uncomment the port mapping if you want to hide/expose the CouchDB service,
        # for example map it to utilize Fauxton User Interface in dev environments.
        ports:
          - "5994:5984"

    peer1.ORG_NAME.DOMAIN_NAME.com:
        extends:
            file: docker-compose-base.yaml
            service: peer
        container_name: peer1.ORG_NAME.DOMAIN_NAME.com
        environment:
 #           - CORE_PEER_CHAINCODELISTENADDRESS=peer1.ORG_NAME.DOMAIN_NAME.com:7051
            - CORE_PEER_ID=peer1.ORG_NAME.DOMAIN_NAME.com
            - CORE_PEER_ADDRESS=peer1.ORG_NAME.DOMAIN_NAME.com:7051
            - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.ORG_NAME.DOMAIN_NAME.com:7051
            - CORE_PEER_NETWORKID=peer1.ORG_NAME.DOMAIN_NAME.com
            - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.ORG_NAME.DOMAIN_NAME.com:7051
            - CORE_PEER_GOSSIP_ORGLEADER=false
            - CORE_PEER_GOSSIP_USELEADERELECTION=true
            - CORE_PEER_LOCALMSPID=ORG_NAMEMSP
            - CORE_PEER_TLS_CLIENTROOTCAS_FILES=/var/hyperledger/users/Admin@ORG_NAME.DOMAIN_NAME.com/tls/ca.crt
            - CORE_PEER_TLS_CLIENTCERT_FILE=/var/hyperledger/users/Admin@ORG_NAME.DOMAIN_NAME.com/tls/client.crt
            - CORE_PEER_TLS_CLIENTKEY_FILE=/var/hyperledger/users/Admin@ORG_NAME.DOMAIN_NAME.com/tls/client.key
            - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
            - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb02ORG_NAME:5984
        volumes:
            - ../crypto-config/peerOrganizations/ORG_NAME.DOMAIN_NAME.com/peers/peer1.ORG_NAME.DOMAIN_NAME.com/msp:/var/hyperledger/msp
            - ../crypto-config/peerOrganizations/ORG_NAME.DOMAIN_NAME.com/peers/peer1.ORG_NAME.DOMAIN_NAME.com/tls:/var/hyperledger/tls
            - ../crypto-config/peerOrganizations/ORG_NAME.DOMAIN_NAME.com/users:/var/hyperledger/users
            - ../channels/:/var/hyperledger/channels
            - /var/hyperledger/peer1:/var/hyperledger/production
            - ../../chaincode:/var/hyperledger/chaincode
        depends_on:
            - orderer0.ORG_NAME.DOMAIN_NAME.com
            - orderer1.ORG_NAME.DOMAIN_NAME.com
            - orderer2.ORG_NAME.DOMAIN_NAME.com
            - couchdb02ORG_NAME
            - peer0.ORG_NAME.DOMAIN_NAME.com
        ports:
          - 7061:7051
          - 7063:7053
        #   
