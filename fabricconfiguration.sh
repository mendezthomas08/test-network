#!/bin/bash
#
function printHelp() {
  echo -e "\e[34m#############################################################################################\e[0m"
  echo -e "\e[31mUsage: \e[0m"
  echo -e "\e[32m\e[1mfabricconfiguration.sh [<org name>] [<Domain Name>] [<Network Name>] [<Channel Name>] [<FabricSDK Port>]\e[0m"
  echo -e "\e[35m[<org name>]\e[0m= name of the org\e[0m"
  echo -e "\e[35m[<Domain Name>]\e[0m= domain name of the org\e[0m"
  echo -e "\e[35m[<Network Name>]\e[0m= swarm overlay network name\e[0m"
  echo -e "\e[35m[<Channel Name>]\e[0m= name of the channel\e[0m"
  echo -e "\e[35m[<FabricSDK Port>]\e[0m= fabric SDK node Port\e[0m"
  echo -e "\e[34m#############################################################################################\e[0m"
}

if [ "$#" = 0 ]; then
 printHelp
 exit 1
fi


ORG_NAME="$1"
DOMAIN_NAME="$2"
NETWORK_NAME="$3"
CHANNEL_NAME="$4"
password="$5"
PORT="$6"
NETWORKSECRET="$7"

mkdir -p ${ORG_NAME}-config/fabricSDK/artifacts/channel

cp -R fabricSDK ${ORG_NAME}-config/
cp -R yamlEditors ${ORG_NAME}-config/
CONFIGSECRET=$(echo `expr $(date +%s) + $(date +%N)` | sha256sum | head -c 64)
cat << EOF > ${ORG_NAME}-config/fabricSDK/config.json
{
   "host":"localhost",
   "port":"${PORT}",
   "jwt_expiretime":"36000",
   "secret":"${CONFIGSECRET}",
   "channelName":"${CHANNEL_NAME}",
   "CC_SRC_PATH":"../artifacts",
   "eventWaitTime":"30000",
   "admins":[
      {
         "username":"admin",
         "secret":"${password}"
      }
   ]
}
EOF
cat << EOF > ${ORG_NAME}-config/fabricSDK/config.js
var util = require('util');
var path = require('path');
var hfc = require('fabric-client');

var file = 'network-config.yaml';

hfc.setConfigSetting('network-connection-profile-path',path.join(__dirname, 'artifacts' ,file));
hfc.setConfigSetting('${ORG_NAME}-connection-profile-path',path.join(__dirname, 'artifacts', '${ORG_NAME}.yaml'));
hfc.addConfigFile(path.join(__dirname, 'config.json'));
EOF

cat << EOF > ${ORG_NAME}-config/fabricSDK/artifacts/${ORG_NAME}.yaml
---
name: "${ORG_NAME}"
x-type: "hlfv1"
description: "Dlt Autogenerated network"
version: "1.0"
client:
  organization: ${ORG_NAME}
  credentialStore:
    path: "./fabric-client-credential-${ORG_NAME}"
    cryptoStore:
      path: "./fabric-client-crypto-${ORG_NAME}"
    wallet: ${ORG_NAME}-wallet
EOF

CURRENT_DIR=$PWD
cd ${ORG_NAME}-config/crypto-config/peerOrganizations/$ORG_NAME.$DOMAIN_NAME.com/users/Admin@$ORG_NAME.$DOMAIN_NAME.com/msp/keystore/
PRIVATE_KEY=$(ls *_sk)
cd "$CURRENT_DIR"
cat << EOF > ${ORG_NAME}-config/fabricSDK/artifacts/network-config.yaml
---
name: "network-config"
x-type: "hlfv1"
description: "Custom generated network by Dlt"
version: "1.0"
channels:
  ${CHANNEL_NAME}:
    orderers: &ref_0
      - orderer0.${ORG_NAME}.${DOMAIN_NAME}.com
      - orderer1.${ORG_NAME}.${DOMAIN_NAME}.com
      - orderer2.${ORG_NAME}.${DOMAIN_NAME}.com
    peers:
      peer0.${ORG_NAME}.${DOMAIN_NAME}.com:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true
      peer1.${ORG_NAME}.${DOMAIN_NAME}.com:
        endorsingPeer: false
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: false
    chaincodes: []
organizations:
  ${ORG_NAME}:
    secret: ${NETWORKSECRET}
    mspid: ${ORG_NAME}MSP
    peers:
      - peer0.${ORG_NAME}.${DOMAIN_NAME}.com
      - peer1.${ORG_NAME}.${DOMAIN_NAME}.com
    certificateAuthorities:
      - ca.${ORG_NAME}.${DOMAIN_NAME}.com
    adminPrivateKey:
      path: ../crypto-config/peerOrganizations/${ORG_NAME}.${DOMAIN_NAME}.com/users/Admin@${ORG_NAME}.${DOMAIN_NAME}.com/msp/keystore/${PRIVATE_KEY}
    signedCert:
      path: ../crypto-config/peerOrganizations/${ORG_NAME}.${DOMAIN_NAME}.com/users/Admin@${ORG_NAME}.${DOMAIN_NAME}.com/msp/signcerts/Admin@${ORG_NAME}.${DOMAIN_NAME}.com-cert.pem
orderers:
  orderer0.${ORG_NAME}.${DOMAIN_NAME}.com:
    mspid: ordererMSP
    url: grpcs://localhost:7050
    grpcOptions:
      ssl-target-name-override: orderer0.${ORG_NAME}.${DOMAIN_NAME}.com
#     grpc-max-send-message-length: 15

    tlsCACerts:
      path: ../crypto-config/ordererOrganizations/${DOMAIN_NAME}.com/orderers/orderer0.${ORG_NAME}.${DOMAIN_NAME}.com/tls/ca.crt
      
  orderer1.${ORG_NAME}.${DOMAIN_NAME}.com:
    mspid: ordererMSP
    url: grpcs://localhost:8050
    grpcOptions:
      ssl-target-name-override: orderer1.${ORG_NAME}.${DOMAIN_NAME}.com
#     grpc-max-send-message-length: 15

    tlsCACerts:
      path: ../crypto-config/ordererOrganizations/${DOMAIN_NAME}.com/orderers/orderer1.${ORG_NAME}.${DOMAIN_NAME}.com/tls/ca.crt

  orderer2.${ORG_NAME}.${DOMAIN_NAME}.com:
    mspid: ordererMSP
    url: grpcs://localhost:9050
    grpcOptions:
      ssl-target-name-override: orderer2.${ORG_NAME}.${DOMAIN_NAME}.com
#     grpc-max-send-message-length: 15

    tlsCACerts:
      path: ../crypto-config/ordererOrganizations/${DOMAIN_NAME}.com/orderers/orderer2.${ORG_NAME}.${DOMAIN_NAME}.com/tls/ca.crt

peers:
  peer0.${ORG_NAME}.${DOMAIN_NAME}.com:
    url: grpcs://localhost:7051
#    eventUrl: grpcs://localhost:7053
    grpcOptions:
      ssl-target-name-override: peer0.${ORG_NAME}.${DOMAIN_NAME}.com
    tlsCACerts:
      path: ../crypto-config/peerOrganizations/${ORG_NAME}.${DOMAIN_NAME}.com/peers/peer0.${ORG_NAME}.${DOMAIN_NAME}.com/tls/ca.crt
  peer1.${ORG_NAME}.${DOMAIN_NAME}.com:
    url: grpcs://localhost:7061
#    eventUrl: 'grpc://localhost:7063'
    grpcOptions:
      ssl-target-name-override: peer1.${ORG_NAME}.${DOMAIN_NAME}.com
    tlsCACerts:
      path: ../crypto-config/peerOrganizations/${ORG_NAME}.${DOMAIN_NAME}.com/peers/peer1.${ORG_NAME}.${DOMAIN_NAME}.com/tls/ca.crt
certificateAuthorities:
  ca.${ORG_NAME}.${DOMAIN_NAME}.com:
    url: https://localhost:7054
    httpOptions:
      verify: false
    tlsCACerts:
      path: ../crypto-config/peerOrganizations/${ORG_NAME}.${DOMAIN_NAME}.com/ca/ca.${ORG_NAME}.${DOMAIN_NAME}.com-cert.pem
    registrar:
      - enrollId: admin
        enrollSecret: ${password}
        caName: ca.${ORG_NAME}.${DOMAIN_NAME}.com
 
EOF
cp ${ORG_NAME}-config/channels/${CHANNEL_NAME}/* ${ORG_NAME}-config/fabricSDK/artifacts/channel/

#cp -R ${ORG_NAME}-config/crypto-config ${ORG_NAME}-config/fabricSDK/artifacts/channel/

cd ${ORG_NAME}-config/fabricSDK



./startApp.sh

  echo -e "\e[34m############################################################\e[0m"
  echo -e "\e[32m FabricSDK app is up and running on PORT:\e[5m${PORT} \e[0m\e[32m\e[0m"
  echo -e "\e[34m############################################################\e[0m"
